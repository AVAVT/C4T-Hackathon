// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AI_Action.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class AIService
{
  static readonly string __ServiceName = "AIService";

  static readonly grpc::Marshaller<global::AIRequest> __Marshaller_AIRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AIRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::AIResponse> __Marshaller_AIResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AIResponse.Parser.ParseFrom);

  static readonly grpc::Method<global::AIRequest, global::AIResponse> __Method_ReturnAIResponse = new grpc::Method<global::AIRequest, global::AIResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "ReturnAIResponse",
      __Marshaller_AIRequest,
      __Marshaller_AIResponse);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::AIActionReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of AIService</summary>
  public abstract partial class AIServiceBase
  {
    /// <summary>
    /// Get map info then return AI response
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::AIResponse> ReturnAIResponse(global::AIRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for AIService</summary>
  public partial class AIServiceClient : grpc::ClientBase<AIServiceClient>
  {
    /// <summary>Creates a new client for AIService</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public AIServiceClient(grpc::Channel channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for AIService that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public AIServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected AIServiceClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected AIServiceClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    /// <summary>
    /// Get map info then return AI response
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::AIResponse ReturnAIResponse(global::AIRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ReturnAIResponse(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// Get map info then return AI response
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::AIResponse ReturnAIResponse(global::AIRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_ReturnAIResponse, null, options, request);
    }
    /// <summary>
    /// Get map info then return AI response
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::AIResponse> ReturnAIResponseAsync(global::AIRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ReturnAIResponseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// Get map info then return AI response
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::AIResponse> ReturnAIResponseAsync(global::AIRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_ReturnAIResponse, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override AIServiceClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new AIServiceClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(AIServiceBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_ReturnAIResponse, serviceImpl.ReturnAIResponse).Build();
  }

}
#endregion
